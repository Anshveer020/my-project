Admin Dashboard

1. HEADER: Dashboard Title and Theme Switch

Requirement:
	•	Must display the heading “Admin Dashboard”.
	•	Theme toggle (light/dark) should switch colors across the layout.
	•	The toggle must be accessible and functional without JavaScript using checkbox input.

VALID TEST CASES:
	•	Title is visible on all screen sizes.
	•	Clicking “Dark Mode” label toggles theme (changes background, text, sidebar, etc.).
	•	No page reload required on switch.

INVALID TEST CASES:
	•	Theme switch hidden or inaccessible.
	•	Theme switch changes only partially (e.g., background changes but text remains light).

⸻

2. SIDEBAR: Navigation Panel

Requirement:
	•	Must contain at least three navigation links: Home, Users, Settings.
	•	Links must be visible and clickable.
	•	Background should adapt based on current theme.

VALID TEST CASES:
	•	All links render in sidebar with default theme.
	•	Sidebar color changes with theme toggle.
	•	Hover effects work correctly.

INVALID TEST CASES:
	•	Link text invisible in either theme.
	•	Links not clickable or not styled.

⸻

3. MAIN CONTENT AREA

Requirement:
	•	Should display welcome text or placeholder for dashboard data.
	•	Text should be readable in both themes.

VALID TEST CASES:
	•	Displays “Welcome, Admin!” and supporting paragraph.
	•	Theme toggle updates text color and background accordingly.

INVALID TEST CASES:
	•	Content overflows or misaligned.
	•	Text invisible in dark mode.

⸻

4. FOOTER

Requirement:
	•	Must appear at the bottom across both themes.
	•	Content should adapt to theme contrast.

VALID TEST CASES:
	•	Footer is always visible.
	•	Footer background and text switch appropriately with theme.

INVALID TEST CASES:
	•	Footer not fixed to bottom.
	•	Footer text not visible due to color contrast issues.

⸻

5. THEME SWITCHING FUNCTIONALITY

Requirement:
	•	Should use a checkbox toggle without JavaScript.
	•	CSS variables (--bg-color, --text-color, etc.) should control the visual theme.
	•	Entire dashboard must update styling based on checkbox state.

VALID TEST CASES:
	•	Uses #theme-toggle:checked ~ .dashboard for CSS overrides.
	•	Works in browsers that support :has() or sibling selectors.

INVALID TEST CASES:
	•	Uses JS unnecessarily.
	•	Theme only updates part of the layout.

⸻

CSS STYLING BREAKDOWN

⸻

1. ELEMENT: body

Purpose: Base styling and theme background
Properties:
	•	background-color: var(--bg-color);
	•	color: var(--text-color);
	•	margin: 0;
	•	font-family: Arial, sans-serif;

⸻

2. ELEMENT: .dashboard

Purpose: CSS Grid container for layout
Properties:
	•	display: grid;
	•	grid-template-areas: "header header" "sidebar main" "footer footer";
	•	grid-template-columns: 200px 1fr;
	•	grid-template-rows: auto 1fr auto;
	•	min-height: 100vh;

⸻

3. ELEMENT: .header

Purpose: Styles the top header bar
Properties:
	•	grid-area: header;
	•	background-color: var(--header-bg);
	•	color: white;
	•	padding: 1rem;
	•	display: flex; justify-content: space-between; align-items: center;

⸻

4. ELEMENT: .toggle-label

Purpose: Label for the dark mode checkbox
Properties:
	•	cursor: pointer;
	•	font-size: 0.9rem;

⸻

5. ELEMENT: .sidebar

Purpose: Navigation panel
Properties:
	•	grid-area: sidebar;
	•	background-color: var(--sidebar-bg);
	•	padding: 1rem;

⸻

6. ELEMENT: .sidebar ul and a

Purpose: Sidebar links and hover effect
Properties:
	•	list-style: disc;
	•	padding-left: 20px;
	•	text-decoration: none;
	•	color: purple;
	•	text-decoration: underline on hover

⸻

7. ELEMENT: .main-content

Purpose: Main dashboard area
Properties:
	•	grid-area: main;
	•	padding: 2rem;

⸻

8. ELEMENT: .footer

Purpose: Footer section
Properties:
	•	grid-area: footer;
	•	background-color: var(--footer-bg);
	•	color: var(--footer-text);
	•	text-align: center;
	•	padding: 1rem;

⸻

LEARNING OUTCOMES
	1.	Learned how to build a fully responsive admin dashboard using HTML and CSS Grid layout.
	2.	Understood how to implement theme switching using a hidden checkbox and CSS-only logic — no JavaScript.
	3.	Practiced using CSS variables (--bg-color, --text-color, etc.) to control dynamic themes.
	4.	Gained experience in writing validation-based test cases for layout, accessibility, and design responsiveness.
	5.	Developed clean and scalable CSS structure suitable for real-world admin dashboards.